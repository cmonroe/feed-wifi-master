--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -4300,6 +4300,12 @@ static int __check_assoc_ies(struct host
 		sta->power_capab = 0;
 	}
 
+	wpabuf_free(sta->vendors_ie);
+	if (ies && ies_len)	{
+		sta->vendors_ie = ieee802_11_all_vendor_ie_concat(ies, ies_len);
+	} else {
+		sta->vendors_ie = 0;
+	}
 	return WLAN_STATUS_SUCCESS;
 }
 
--- a/src/ap/sta_info.c
+++ b/src/ap/sta_info.c
@@ -378,6 +378,7 @@ void ap_free_sta(struct hostapd_data *ha
 	os_free(sta->t_c_url);
 	wpabuf_free(sta->hs20_deauth_req);
 	os_free(sta->hs20_session_info_url);
+	wpabuf_free(sta->vendors_ie);
 
 #ifdef CONFIG_SAE
 	sae_clear_data(sta->sae);
--- a/src/ap/sta_info.h
+++ b/src/ap/sta_info.h
@@ -331,6 +331,7 @@ struct sta_info {
 	struct mld_info mld_info;
 	u8 mld_assoc_link_id;
 #endif /* CONFIG_IEEE80211BE */
+	struct wpabuf *vendors_ie;
 };
 
 
--- a/src/common/ieee802_11_common.c
+++ b/src/common/ieee802_11_common.c
@@ -1150,6 +1150,33 @@ struct wpabuf * ieee802_11_vendor_ie_con
 }
 
 
+struct wpabuf * ieee802_11_all_vendor_ie_concat(const u8 *ies, size_t ies_len)
+{
+	struct wpabuf *buf = 0;
+	const struct element *elem;
+	size_t e_len = 0;
+
+	for_each_element_id(elem, WLAN_EID_VENDOR_SPECIFIC, ies, ies_len) {
+		if (elem->datalen >= 4) {
+			e_len += elem->datalen + 2;
+		}
+	}
+
+	if (e_len > 0 && (buf = wpabuf_alloc(e_len)) != NULL) {
+		/*
+		* There may be multiple vendor IEs in the message, so need to
+		* concatenate their data fields.
+		*/
+		for_each_element_id(elem, WLAN_EID_VENDOR_SPECIFIC, ies, ies_len) {
+			if (elem->datalen >= 4)	{
+				wpabuf_put_data(buf, &elem->id, elem->datalen + 2);
+			}
+		}
+	}
+	return buf;
+}
+
+
 const u8 * get_hdr_bssid(const struct ieee80211_hdr *hdr, size_t len)
 {
 	u16 fc, type, stype;
--- a/src/common/ieee802_11_common.h
+++ b/src/common/ieee802_11_common.h
@@ -199,6 +199,7 @@ ParseRes ieee802_11_parse_link_assoc_req
 int ieee802_11_ie_count(const u8 *ies, size_t ies_len);
 struct wpabuf * ieee802_11_vendor_ie_concat(const u8 *ies, size_t ies_len,
 					    u32 oui_type);
+struct wpabuf * ieee802_11_all_vendor_ie_concat(const u8 *ies, size_t ies_len);
 struct ieee80211_hdr;
 const u8 * get_hdr_bssid(const struct ieee80211_hdr *hdr, size_t len);
 
--- a/src/ap/ubus.c
+++ b/src/ap/ubus.c
@@ -24,6 +24,7 @@
 #include "taxonomy.h"
 #include "airtime_policy.h"
 #include "hw_features.h"
+#include <stdlib.h>     /* qsort */
 
 static struct ubus_context *ctx;
 static struct blob_buf b;
@@ -168,7 +169,7 @@ hostapd_bss_reload(struct ubus_context *
 
 
 static void
-hostapd_parse_vht_map_blobmsg(uint16_t map)
+hostapd_parse_map_blobmsg(uint16_t map, u32 flags)
 {
 	char label[4];
 	int16_t val;
@@ -177,12 +178,26 @@ hostapd_parse_vht_map_blobmsg(uint16_t m
 	for (i = 0; i < 8; i++) {
 		snprintf(label, 4, "%dss", i + 1);
 
-		val = (map & (BIT(1) | BIT(0))) + 7;
-		blobmsg_add_u16(&b, label, val == 10 ? -1 : val);
-		map = map >> 2;
+		if (flags & WLAN_STA_VHT) {
+			val = (map & (BIT(1) | BIT(0))) + 7;
+			blobmsg_add_u16(&b, label, val == 10 ? -1 : val);
+			map = map >> 2;
+		} else if (flags & WLAN_STA_HE) {
+			val = (map & (BIT(1) | BIT(0))) * 2 + 7;
+			blobmsg_add_u16(&b, label, val == 13 ? -1 : val);
+			map = map >> 2;
+		}
 	}
 }
 
+struct wifi_capas {
+	const char *name;
+	uint8_t byte;
+	uint8_t bitstart;
+	uint8_t bitcount;
+};
+
+
 static void
 hostapd_parse_vht_capab_blobmsg(struct ieee80211_vht_capabilities *vhtc)
 {
@@ -194,24 +209,233 @@ hostapd_parse_vht_capab_blobmsg(struct i
 		const char *name;
 		uint32_t flag;
 	} vht_capas[] = {
+		{ "rx_ldpc", VHT_CAP_RXLDPC },
+		{ "short_gi_80MHz_tvht_mode_4c", VHT_CAP_SHORT_GI_80 },
+		{ "short_gi_160_80_80MHz", VHT_CAP_SHORT_GI_160 },
+		{ "tx_stbc", VHT_CAP_TXSTBC },
+		{ "su_beamformer", VHT_CAP_SU_BEAMFORMER_CAPABLE },
 		{ "su_beamformee", VHT_CAP_SU_BEAMFORMEE_CAPABLE },
+		{ "mu_beamformer", VHT_CAP_MU_BEAMFORMER_CAPABLE },
 		{ "mu_beamformee", VHT_CAP_MU_BEAMFORMEE_CAPABLE },
+		{ "tx_op_ps", VHT_CAP_VHT_TXOP_PS },
+		{ "htc_vht", VHT_CAP_HTC_VHT },
+		{ "vht_link_adaptation_mrq_mfb", VHT_CAP_VHT_LINK_ADAPTATION_VHT_MRQ_MFB },
+		{ "vht_link_adaptation_unsol_mfg", VHT_CAP_VHT_LINK_ADAPTATION_VHT_UNSOL_MFB },
+		{ "rx_antenna_pattern", VHT_CAP_RX_ANTENNA_PATTERN },
+		{ "tx_antenna_pattern", VHT_CAP_TX_ANTENNA_PATTERN }
+	};
+
+	static const struct {
+		const char *name;
+		uint32_t mask;
+		uint32_t shift;
+	} vht_capas_value[] = {
+		{ "max_mpdu_length", VHT_CAP_MAX_MPDU_LENGTH_MASK, 0 },
+		{ "channel_width_set", VHT_OPMODE_CHANNEL_WIDTH_MASK, VHT_CAP_SUPP_CHAN_WIDTH_MASK_SHIFT },
+		{ "rx_stbc", VHT_CAP_RXSTBC_MASK, VHT_CAP_RXSTBC_MASK_SHIFT },
+		{ "beamformee_sts_max", VHT_CAP_BEAMFORMEE_STS_MAX, VHT_CAP_BEAMFORMEE_STS_MAX_SHIFT },
+		{ "sounding_dimension_max", VHT_CAP_SOUNDING_DIMENSION_MAX, VHT_CAP_SOUNDING_DIMENSION_MAX_SHIFT },
+		{ "max_a_mpdu_length_exponent", VHT_CAP_MAX_A_MPDU_LENGTH_EXPONENT_MAX, VHT_CAP_MAX_A_MPDU_LENGTH_EXPONENT_MAX_SHIFT },
+		{ "extended_nss_bw", ((u8) BIT(30) | BIT(31)), 30 },
 	};
 
 	for (i = 0; i < ARRAY_SIZE(vht_capas); i++)
 		blobmsg_add_u8(&b, vht_capas[i].name,
 				!!(vhtc->vht_capabilities_info & vht_capas[i].flag));
 
+	for (i = 0; i < ARRAY_SIZE(vht_capas_value); i++)
+	{
+		uint16_t value = (vhtc->vht_capabilities_info & vht_capas_value[i].mask) >> vht_capas_value[i].shift;
+		blobmsg_add_u32(&b, vht_capas_value[i].name, value);
+	}
+
+	supported_mcs = blobmsg_open_table(&b, "mcs_map");
+
+	/* RX map */
+	map = blobmsg_open_table(&b, "rx");
+	hostapd_parse_map_blobmsg(le_to_host16(vhtc->vht_supported_mcs_set.rx_map), WLAN_STA_VHT);
+	blobmsg_close_table(&b, map);
+
+	/* TX map */
+	map = blobmsg_open_table(&b, "tx");
+	hostapd_parse_map_blobmsg(le_to_host16(vhtc->vht_supported_mcs_set.tx_map), WLAN_STA_VHT);
+	blobmsg_close_table(&b, map);
+
+	blobmsg_close_table(&b, supported_mcs);
+}
+
+static uint16_t calculate_bitmapped_value(uint8_t *databuf, uint8_t byte, uint8_t bitstart, uint8_t bitcount)
+{
+	uint16_t value=0;
+	uint8_t bit=bitstart;
+
+	while (bitcount > 0)
+	{
+		value = value << 1;
+		value += (databuf[byte] & bit) ? 1 : 0;
+		bitcount--;
+		bit = (bit >> 1) & 0x7f;
+		if (bit == 0)
+		{
+			bit = 0x80;
+			byte++;
+		}
+	}
+	return value;
+}
+
+static void
+hostapd_parse_he_capab_blobmsg(struct ieee80211_he_capabilities *hec)
+{
+	void *supported_mcs;
+	void *map;
+	void *mac_caps;
+	void *phy_caps;
+	int i;
+
+	static const struct wifi_capas mac_capas[] = {
+		{ "htc_he", 5, 0x01, 1 },
+		{ "twt_requester", 5, 0x02, 1 },
+		{ "twt_responder", 5, 0x04, 1 },
+		{ "trigger_frame_mac_padding", 4, 0x08, 2 },
+		{ "multi_tid_aggregation", 4, 0x40, 3 },
+		{ "he_link_adaptation", 3, 0x01, 2 },
+		{ "all_ack", 3, 0x02, 1 },
+		{ "trs", 3, 0x04, 1 },
+		{ "bsr", 3, 0x08, 1 },
+		{ "broadcast_twt", 3, 0x10, 1 },
+		{ "32_bit_ba_map", 3, 0x20, 1 },
+		{ "mu_cascading", 3, 0x40, 1 },
+		{ "ack_enabled_agg", 3, 0x80, 1 },
+		{ "om_control", 2, 0x02, 1 },
+		{ "ofdma_ra", 2, 0x04, 1 },
+		{ "max_a_mpdu_length_exponent", 2, 0x10, 2 },
+		{ "a_msdu_frag", 2, 0x20, 1 },
+		{ "flex_twt_sched", 2, 0x40, 1 },
+		{ "rx_ctrl_to_mbss", 2, 0x80, 1 },
+		{ "bsrp_bqrp_a_mpdu_agg", 1, 0x01, 1 },
+		{ "qtp", 1, 0x02, 1 },
+		{ "bqr", 1, 0x04, 1 },
+		{ "srp", 1, 0x08, 1 },
+		{ "ndp_feedback", 1, 0x10, 1 },
+		{ "ops", 1, 0x20, 1 },
+		{ "a_msdu_in_a_mpdu", 1, 0x40, 1 },
+		{ "multi_tid_aggregation_tx", 0, 0x02, 3 },
+		{ "he_subchan_select_tx", 0, 0x04, 1 },
+		{ "ul_2x996_tone_ru", 0, 0x08, 1 },
+		{ "om_ctrl_ul_mu_disable_rx", 0, 0x10, 1 },
+		{ "he_dynamic_sm_pwr_save", 0, 0x20, 1 },
+		{ "punctured_sounding", 0, 0x40, 1 },
+		{ "ht_vht_trig_frame_rx", 0, 0x80, 1 }
+	};
+
+	static const struct wifi_capas phy_capas[] = {
+		{ "40mhz_in_2_4ghz", 0, 0x02, 1 },
+		{ "40_80mhz_in_5ghz", 0, 0x04, 1 },
+		{ "160mhz_in_5ghz", 0, 0x08, 1 },
+		{ "160_80_80mhz_in_5ghz", 0, 0x10, 1 },
+		{ "242_tone_rus_in_2_4ghz", 0, 0x20, 1 },
+		{ "242_tone_rus_in_5ghz", 0, 0x40, 1 },
+		{ "punctured_preamble", 2, 0x08, 4 },
+		{ "class_b_device", 2, 0x10, 1 },
+		{ "ldpc_coding", 2, 0x20, 1 },
+		{ "he_su_ppdu_w_1x_he_ltf_0_8us_gi", 2, 0x40, 1 },
+		{ "midamble_rx_max_nsts", 1, 0x01, 2 },
+		{ "ndp_w_4x_he_ltf_3_2us_gi", 1, 0x02, 1 },
+		{ "stbc_tx<=80mhz", 1, 0x04, 1 },
+		{ "stbc_rx<=80mhz", 1, 0x08, 1 },
+		{ "doppler_tx", 1, 0x10, 1 },
+		{ "doppler_rx", 1, 0x20, 1 },
+		{ "full_bw_ul_mu_mimo", 1, 0x40, 1 },
+		{ "partial_bw_ul_mu_mimo", 1, 0x80, 1 },
+		{ "dcm_max_constellation_tx", 4, 0x02, 2 },
+		{ "dcm_max_nss_tx:_1_space_time_stream", 4, 0x04, 1 },
+		{ "dcm_max_constellation_rx", 4, 0x10, 2 },
+		{ "dcm_max_nss_rx:_1_space_time_stream", 4, 0x20, 1 },
+		{ "rx_he_mu_ppdu_fr_non_ap_sta", 4, 0x40, 1 },
+		{ "su_beamformer", 4, 0x08, 1 },
+		{ "su_beamformee", 3, 0x01, 1 },
+		{ "mu_beamformer", 3, 0x02, 1 },
+		{ "beamformee_sts<=80Mhz", 3, 0x10, 3 },
+		{ "beamformee_sts>80Mhz", 3, 0x80, 3 },
+		{ "num_sounding_dimensions<=80mhz", 6, 0x04, 3 },
+		{ "num_sounding_dimensions>80mhz", 6, 0x20, 3 },
+		{ "ng_=_16_su_feedback", 6, 0x40, 1 },
+		{ "ng_=_16_mu_feedback", 6, 0x80, 1 },
+		{ "codebook_size_su_feedback", 5, 0x01, 1 },
+		{ "codebook_size_mu_feedback", 5, 0x02, 1 },
+		{ "triggered_su_beamforming_feedback", 5, 0x04, 1 },
+		{ "triggered_mu_beamforming_feedback", 5, 0x08, 1 },
+		{ "triggered_cqi_feedback", 5, 0x10, 1 },
+		{ "partial_bw_ext_range", 5, 0x20, 1 },
+		{ "partial_bw_dl_mu_mimo", 5, 0x40, 1 },
+		{ "ppe_threshold_present", 5, 0x80, 1 },
+		{ "srp_based_sr_support", 8, 0x01, 1 },
+		{ "power_boost_factor_ar", 8, 0x02, 1 },
+		{ "he_su_mu_ppdu_w_4x_he_ltf_0_8us_gi", 8, 0x04, 1 },
+		{ "max_nc", 8, 0x20, 3 },
+		{ "stbc_tx>80mhz", 8, 0x40, 1 },
+		{ "stbc_rx>80mhz", 8, 0x80, 1 },
+		{ "he_er_su_ppdu_w_4x_he_ltf_0_8us_gi", 7, 0x01, 1 },
+		{ "20mhz_in_40mhz_he_ppdu_in_2_4ghz", 7, 0x02, 1 },
+		{ "20mhz_in_160/80_80mhz_he_ppdu", 7, 0x04, 1 },
+		{ "80mhz_in_160/80_80mhz_he_ppdu", 7, 0x08, 1 },
+		{ "he_er_su_ppdu_w_1x_he_ltf_0_8us_gi", 7, 0x10, 1 },
+		{ "midamble_rx_2x_1x_he_ltf", 7, 0x20, 1 },
+		{ "dcm_max_bw", 7, 0x80, 2 },
+		{ "longer_than_16_he_sig_b_ofdm_sym", 10, 0x01, 1 },
+		{ "non_trig_cqi_feedback", 10, 0x02, 1 },
+		{ "tx_1024_qam<242_tone_ru", 10, 0x04, 1 },
+		{ "rx_1024_qam<242_tone_ru", 10, 0x08, 1 },
+		{ "rx_full_bw_su_w_he_mu_ppdu_w_comp_sigb", 10, 0x10, 1 },
+		{ "rx_full_bw_su_w_he_mu_ppdu_w_non_comp_sigb", 10, 0x20, 1 },
+		{ "nominal_packet_padding", 10, 0x80, 2 }
+	};
+
+	mac_caps = blobmsg_open_table(&b, "mac_capabilities");
+
+	for (i = 0; i < ARRAY_SIZE(mac_capas); i++)
+	{
+		if (mac_capas[i].bitcount > 1)
+		{
+			uint16_t value = calculate_bitmapped_value(&hec->he_mac_capab_info[0], mac_capas[i].byte, mac_capas[i].bitstart, mac_capas[i].bitcount);
+			blobmsg_add_u32(&b, mac_capas[i].name, value);
+		}
+		else
+		{
+			uint8_t bitval = !!(hec->he_mac_capab_info[mac_capas[i].byte] & mac_capas[i].bitstart);
+			blobmsg_add_u8(&b, mac_capas[i].name, bitval);
+		}
+	}
+	blobmsg_close_table(&b, mac_caps);
+
+	phy_caps = blobmsg_open_table(&b, "phy_capabilities");
+
+	for (i = 0; i < ARRAY_SIZE(phy_capas); i++)
+	{
+		if (phy_capas[i].bitcount > 1)
+		{
+			uint16_t value = calculate_bitmapped_value(&hec->he_phy_capab_info[0], phy_capas[i].byte, phy_capas[i].bitstart, phy_capas[i].bitcount);
+			blobmsg_add_u32(&b, phy_capas[i].name, value);
+		}
+		else
+		{
+			uint8_t bitval = !!(hec->he_phy_capab_info[phy_capas[i].byte] & phy_capas[i].bitstart);
+			blobmsg_add_u8(&b, phy_capas[i].name, bitval);
+		}
+	}
+	blobmsg_close_table(&b, phy_caps);
+
 	supported_mcs = blobmsg_open_table(&b, "mcs_map");
 
 	/* RX map */
 	map = blobmsg_open_table(&b, "rx");
-	hostapd_parse_vht_map_blobmsg(le_to_host16(vhtc->vht_supported_mcs_set.rx_map));
+	hostapd_parse_map_blobmsg(le_to_host16(*((le16 *)&hec->optional[0])), WLAN_STA_HE);
 	blobmsg_close_table(&b, map);
 
 	/* TX map */
 	map = blobmsg_open_table(&b, "tx");
-	hostapd_parse_vht_map_blobmsg(le_to_host16(vhtc->vht_supported_mcs_set.tx_map));
+	hostapd_parse_map_blobmsg(le_to_host16(*((le16 *)&hec->optional[2])), WLAN_STA_HE);
 	blobmsg_close_table(&b, map);
 
 	blobmsg_close_table(&b, supported_mcs);
@@ -230,11 +454,56 @@ hostapd_parse_capab_blobmsg(struct sta_i
 		blobmsg_close_table(&b, r);
 	}
 
-	/* ToDo: Add HT / HE capability parsing */
+	if (sta->he_capab) {
+		r = blobmsg_open_table(&b, "he");
+		hostapd_parse_he_capab_blobmsg(sta->he_capab);
+		blobmsg_close_table(&b, r);
+	}
+
+	/* ToDo: Add HT capability parsing */
 
 	blobmsg_close_table(&b, v);
 }
 
+struct vendor_specific_info {
+	u8 oui[3];
+	u8 data;
+};
+
+static void
+hostapd_parse_vendors(struct sta_info *sta)
+{
+	void *vendors;
+
+	vendors = blobmsg_open_table(&b, "vendors");
+
+	if (sta->vendors_ie) {
+ 		const struct element *elem;
+		const u8 *iebuf = wpabuf_head_u8(sta->vendors_ie);
+
+		for_each_element(elem, iebuf, sta->vendors_ie->used) {
+			const struct vendor_specific_info *info = (struct vendor_specific_info *)elem->data;
+			char oui[25];
+			char *data;
+			char *idata=(char *)&info->data;
+
+			sprintf(oui, "%02x:%02x:%02x", info->oui[0], info->oui[1], info->oui[2]);
+			data = blobmsg_alloc_string_buffer(&b, oui, elem->datalen * 2 + 25);
+			for(int i=0; i < elem->datalen - 3; ++i) {
+				sprintf(data, "%02x", idata[i]);
+				data += 2;
+			}
+			blobmsg_add_string_buffer(&b);
+		}
+ 	}
+	blobmsg_close_table(&b, vendors);
+}
+
+int compare_char(const void * a, const void * b)
+{
+	return *(char*)a - *(char*)b;
+}
+
 static int
 hostapd_bss_get_clients(struct ubus_context *ctx, struct ubus_object *obj,
 			struct ubus_request_data *req, const char *method,
@@ -279,9 +548,25 @@ hostapd_bss_get_clients(struct ubus_cont
 		blobmsg_add_u8(&b, "mbo", !!(sta->cell_capa));
 #endif
 
+		r = blobmsg_open_array(&b, "supported_rates");
+		/* Check if client advertises supported rates */
+		uint16_t rates_len = sta->supported_rates_len;
+		if (sta->supported_rates && rates_len > 0) {
+			uint8_t *rate_array = malloc(rates_len);
+			memcpy(rate_array, sta->supported_rates, rates_len);
+			qsort(rate_array, rates_len, sizeof(char), compare_char);
+			for (i = 0; i < rates_len; i++) {
+				// OWRT-9263 mask the BSSBasicRateSet bit and convert speed from units of 500kbps to units of 1Mbps
+				blobmsg_add_u32(&b, "", ( rate_array[i] & 0x7f) >> 1 );
+			}
+			free(rate_array);
+		}
+		blobmsg_close_array(&b, r);
+
 		r = blobmsg_open_array(&b, "rrm");
-		for (i = 0; i < ARRAY_SIZE(sta->rrm_enabled_capa); i++)
+		for (i = 0; i < ARRAY_SIZE(sta->rrm_enabled_capa); i++) {
 			blobmsg_add_u32(&b, "", sta->rrm_enabled_capa[i]);
+		}
 		blobmsg_close_array(&b, r);
 
 		r = blobmsg_open_array(&b, "extended_capabilities");
@@ -323,6 +608,7 @@ hostapd_bss_get_clients(struct ubus_cont
 		}
 
 		hostapd_parse_capab_blobmsg(sta);
+		hostapd_parse_vendors(sta);
 
 		blobmsg_close_table(&b, c);
 	}
@@ -362,7 +648,7 @@ hostapd_bss_get_status(struct ubus_conte
 
 	if (hapd->conf->ssid.ssid_len < SSID_MAX_LEN)
 		ssid_len = hapd->conf->ssid.ssid_len;
-	
+
 	ieee80211_freq_to_channel_ext(hapd->iface->freq,
 				      hapd->iconf->secondary_channel,
 				      hostapd_get_oper_chwidth(hapd->iconf),
@@ -1961,7 +2247,7 @@ void hostapd_ubus_notify_bss_transition_
 	blobmsg_add_u8(&b, "bss-termination-delay", bss_termination_delay);
 	if (target_bssid)
 		blobmsg_add_macaddr(&b, "target-bssid", target_bssid);
-	
+
 	hostapd_ubus_notify_bss_transition_add_candidate_list(candidate_list, candidate_list_len);
 
 	ubus_notify(ctx, &hapd->ubus.obj, "bss-transition-response", b.head, -1);
