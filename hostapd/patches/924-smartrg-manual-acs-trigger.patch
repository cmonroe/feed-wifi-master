--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -80,6 +80,8 @@
 #define HOSTAPD_GLOBAL_CTRL_IFACE_PORT_LIMIT	50
 #endif /* CONFIG_CTRL_IFACE_UDP */
 
+extern enum hostapd_chan_status acs_init(struct hostapd_iface *iface);
+
 static void hostapd_ctrl_iface_send(struct hostapd_data *hapd, int level,
 				    enum wpa_msg_type type,
 				    const char *buf, size_t len);
@@ -164,11 +166,20 @@ static char *get_option(char *opt, char
   
 static void hostapd_ctrl_compute_secondary( struct hostapd_config *conf )
 {
-	/* Just set the secondary frequeycy */
+	/* Just set the secondary frequency */
 	int s40, s80, s160, ch;
 
 	ch = conf->channel;
 
+	if (ch == 165) {
+		conf->vht_oper_centr_freq_seg0_idx = ch;
+#ifdef CONFIG_IEEE80211AX
+		if (conf->ieee80211ax == 1)
+			conf->he_oper_centr_freq_seg0_idx = ch;
+#endif
+		goto out;
+	}
+
 	s40 = ch + (ch & 0x4) - 2;
 #ifdef CONFIG_IEEE80211AX
 	if( is_6ghz_op_class(conf->op_class) )
@@ -177,10 +188,16 @@ static void hostapd_ctrl_compute_seconda
 	s80 = s40 + 4 - (s40 & 0x8);
 	s160 = s80 + 8 - (s80 & 0x10);
 
+	wpa_printf(MSG_WARNING, "ACS: hostapd_ctrl_compute_secondary() bw=%u ch=%d s40=%d s80=%d s160=%d",
+			conf->bw, ch, s40, s80, s160);
+
 	switch( conf->vht_oper_chwidth )
 	{
 	case CHANWIDTH_USE_HT:
-		conf->vht_oper_centr_freq_seg0_idx = s40;
+		if (conf->bw == 20)
+			conf->vht_oper_centr_freq_seg0_idx = ch;
+		else
+			conf->vht_oper_centr_freq_seg0_idx = s40;
 		break;
 	case CHANWIDTH_80MHZ:
 		conf->vht_oper_centr_freq_seg0_idx = s80;
@@ -191,28 +208,90 @@ static void hostapd_ctrl_compute_seconda
 	default:
 		break;
 	}
+
+#ifdef CONFIG_IEEE80211AX
+	if (conf->ieee80211ax == 1) {
+		switch( conf->he_oper_chwidth )
+		{
+		case CHANWIDTH_USE_HT:
+			if (conf->bw == 20)
+				conf->he_oper_centr_freq_seg0_idx = ch;
+			else
+				conf->he_oper_centr_freq_seg0_idx = s40;
+			break;
+		case CHANWIDTH_80MHZ:
+			conf->he_oper_centr_freq_seg0_idx = s80;
+			break;
+		case CHANWIDTH_160MHZ:
+			conf->he_oper_centr_freq_seg0_idx = s160;
+			break;
+		default:
+			break;
+		}
+	}
+#endif
+out:
+	wpa_printf(MSG_WARNING, "ACS: hostapd_ctrl_compute_secondary() vht_chwidth=%d, channel=%d, vht_center=%d",
+		conf->vht_oper_chwidth, conf->channel,
+		conf->vht_oper_centr_freq_seg0_idx);
+#ifdef CONFIG_IEEE80211AX
+	wpa_printf(MSG_WARNING, "ACS: hostapd_ctrl_compute_secondary() he_chwidth=%d, channel=%d, he_center=%d",
+		conf->he_oper_chwidth, conf->channel,
+		conf->he_oper_centr_freq_seg0_idx);
+#endif
 }
 
-static void hostapd_ctrl_update_fixup( struct hostapd_config *conf )
+void hostapd_ctrl_update_fixup( struct hostapd_config *conf )
 {
+	u8 center;
 	// Can't keep hostapd's configure secondary idx if we change channel.
 	// Allow hostapd_set_freq_params to compute the secondary channel.
 	conf->vht_oper_centr_freq_seg0_idx = 0;
+#ifdef CONFIG_IEEE80211AX
+	conf->he_oper_centr_freq_seg0_idx = 0;
+#endif
 
 	if ( conf->channel == 165 )
 	{
 		// Can't do anything but 20Mhz
 		conf->vht_oper_chwidth=0;
+#ifdef CONFIG_IEEE80211AX
+		conf->he_oper_chwidth=0;
+#endif
 		conf->secondary_channel=0;
 	}
-	if ( conf->vht_oper_chwidth && conf->secondary_channel == 0 )
-	{
-		// WPA is connected to a 20Mhz channel, but we are configured for 80Mhz
-		// spoof secondary channel to allow set_freq_params compute secondary
-		conf->secondary_channel=1;
-	}
 
 	hostapd_ctrl_compute_secondary( conf );
+
+	// Fix up secondary_channel as well
+	center = conf->vht_oper_centr_freq_seg0_idx;
+	if ((center == 0) || (center == conf->channel))
+		conf->secondary_channel = 0;
+	else if (center < conf->channel)
+		conf->secondary_channel = -1;
+	else if (center > conf->channel)
+		conf->secondary_channel = 1;
+	else {
+		wpa_printf(MSG_ERROR, "hostapd_ctrl_update_fixup: Invalid secondary channel!");
+	}
+	wpa_printf(MSG_WARNING, "ACS: hostapd_ctrl_update_fixup: vht_chwidth=%d, channel=%d, vht_center=%d",
+		conf->vht_oper_chwidth, conf->channel, conf->vht_oper_centr_freq_seg0_idx);
+#ifdef CONFIG_IEEE80211AX
+	if (conf->ieee80211ax == 1) {
+		center = conf->he_oper_centr_freq_seg0_idx;
+		if ((center == 0) || (center == conf->channel))
+			conf->secondary_channel = 0;
+		else if (center < conf->channel)
+			conf->secondary_channel = -1;
+		else if (center > conf->channel)
+			conf->secondary_channel = 1;
+		else {
+			wpa_printf(MSG_ERROR, "hostapd_ctrl_update_fixup: Invalid secondary channel!");
+		}
+	}
+	wpa_printf(MSG_WARNING, "ACS: hostapd_ctrl_update_fixup: he_chwidth=%d, channel=%d, he_center=%d",
+		conf->he_oper_chwidth, conf->channel, conf->he_oper_centr_freq_seg0_idx);
+#endif
 }
 
 static struct hostapd_config *hostapd_ctrl_iface_config_read(const char *fname)
@@ -1523,6 +1602,23 @@ static int hostapd_ctrl_iface_reload_bss
 }
 
 
+static int hostapd_ctrl_iface_trigger_acs(struct hostapd_iface *iface)
+{
+	enum hostapd_chan_status status;
+
+	iface->manual_acs_triggered = true;
+	// Force this to 1 to get a usable channel with manual ACS
+	iface->conf->ht40_plus_minus_allowed = 1;
+	status = acs_init(iface);
+
+	if (status != HOSTAPD_CHAN_ACS) {
+		wpa_printf(MSG_ERROR, "Triggering of ACS failed (%u)", status);
+		return -1;
+	}
+	return 0;
+}
+
+
 static int hostapd_ctrl_iface_disable(struct hostapd_iface *iface)
 {
 	if (hostapd_disable_iface(iface) < 0) {
@@ -3620,6 +3716,9 @@ static int hostapd_ctrl_iface_receive_pr
 	} else if (os_strncmp(buf, "RELOAD", 6) == 0) {
 		if (hostapd_ctrl_iface_reload(hapd->iface))
 			reply_len = -1;
+	} else if (os_strncmp(buf, "TRIGGER_ACS", 11) == 0) {
+		if (hostapd_ctrl_iface_trigger_acs(hapd->iface))
+			reply_len = -1;
 	} else if (os_strncmp(buf, "DISABLE", 7) == 0) {
 		if (hostapd_ctrl_iface_disable(hapd->iface))
 			reply_len = -1;
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -1223,6 +1223,12 @@ static int hostapd_cli_cmd_reload_bss(st
 	return wpa_ctrl_command(ctrl, "RELOAD_BSS");
 }
 
+static int hostapd_cli_cmd_trigger_acs(struct wpa_ctrl *ctrl, int argc,
+				      char *argv[])
+{
+	return wpa_ctrl_command(ctrl, "TRIGGER_ACS");
+}
+
 
 static int hostapd_cli_cmd_disable(struct wpa_ctrl *ctrl, int argc,
 				      char *argv[])
@@ -1769,6 +1775,8 @@ static const struct hostapd_cli_cmd host
 	  "<addr> [req_mode=] <measurement request hexdump>  = send a Beacon report request to a station" },
 	{ "reload_wpa_psk", hostapd_cli_cmd_reload_wpa_psk, NULL,
 	  "= reload wpa_psk_file only" },
+	{ "trigger_acs", hostapd_cli_cmd_trigger_acs, NULL,
+	  "= trigger automatic channel selection" },
 #ifdef ANDROID
 	{ "driver", hostapd_cli_cmd_driver, NULL,
 	  "<driver sub command> [<hex formatted data>] = send driver command data" },
--- a/hostapd/main.c
+++ b/hostapd/main.c
@@ -377,6 +377,7 @@ hostapd_interface_init(struct hapd_inter
 	}
 
 	iface->interfaces = interfaces;
+	iface->manual_acs_triggered = false;
 
 	for (k = 0; k < debug; k++) {
 		if (iface->bss[0]->conf->logger_stdout_level > 0)
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -682,6 +682,13 @@ struct hostapd_iface {
 	int (*enable_iface_cb)(struct hostapd_iface *iface);
 	int (*disable_iface_cb)(struct hostapd_iface *iface);
 
+	/*
+	 * If ACS is triggered manually via hostapd_cli, then
+	 * we won't be doing channel change at the end of ACS.
+	 * It will be done via chan_switch later on, if needed.
+	 */
+	bool manual_acs_triggered;	
+
 	/* Configured freq of interface is NO_IR */
 	bool is_no_ir;
 };
--- a/src/ap/hw_features.c
+++ b/src/ap/hw_features.c
@@ -1148,6 +1148,33 @@ int hostapd_acs_completed(struct hostapd
 		wpa_msg(iface->bss[0]->msg_ctx, MSG_INFO,
 			ACS_EVENT_COMPLETED "freq=%d channel=%d",
 			iface->freq, iface->conf->channel);
+
+		// Record the best channel for later use.
+		{
+			FILE *pFile = NULL;
+			char filename[32];
+			sprintf (filename, "/tmp/hapd_acs_%s", iface->phy);
+			pFile = fopen(filename, "w");
+			if (!pFile) {
+				wpa_printf(MSG_ERROR, "Unable to open %s for writing", filename);
+				break;
+			}
+			fprintf(pFile, "phy=%s\n", iface->phy);
+			fprintf(pFile, "config_fname=%s\n", iface->config_fname);
+			fprintf(pFile, "freq=%d\n", iface->freq);
+			fprintf(pFile, "channel=%d\n", iface->conf->channel);
+			fclose (pFile);
+		}
+
+		// If ACS was triggered manually via hostapd_cli, then
+		// channel change will happen separately via chan_switch.
+		if (iface->manual_acs_triggered == true) {
+			iface->manual_acs_triggered = false;
+			hostapd_set_state(iface, HAPD_IFACE_ENABLED);
+			wpa_msg(iface->bss[0]->msg_ctx, MSG_INFO, AP_EVENT_ENABLED);
+			return 0;
+		}
+
 		break;
 	case HOSTAPD_CHAN_ACS:
 		wpa_printf(MSG_ERROR, "ACS error - reported complete, but no result available");
--- a/src/ap/acs.c
+++ b/src/ap/acs.c
@@ -296,7 +296,7 @@ static const struct bw_item *bw_desc[] =
 
 static int acs_request_scan(struct hostapd_iface *iface);
 static int acs_survey_is_sufficient(struct freq_survey *survey);
-
+extern void hostapd_ctrl_update_fixup( struct hostapd_config *conf);
 
 static void acs_clean_chan_surveys(struct hostapd_channel_data *chan)
 {
@@ -827,7 +827,7 @@ acs_find_ideal_chan_mode(struct hostapd_
 			continue;
 
 		if (!chan_bw_allowed(chan, bw, 1, 1)) {
-			wpa_printf(MSG_DEBUG,
+			wpa_printf(MSG_WARNING,
 				   "ACS: Channel %d: BW %u is not supported",
 				   chan->chan, bw);
 			continue;
@@ -840,7 +840,7 @@ acs_find_ideal_chan_mode(struct hostapd_
 		      iface->conf->secondary_channel) ||
 		     is_6ghz_freq(chan->freq)) &&
 		    !acs_usable_bw_chan(chan, ACS_BW40)) {
-			wpa_printf(MSG_DEBUG,
+			wpa_printf(MSG_WARNING,
 				   "ACS: Channel %d: not allowed as primary channel for 40 MHz bandwidth",
 				   chan->chan);
 			continue;
@@ -851,7 +851,7 @@ acs_find_ideal_chan_mode(struct hostapd_
 			if (hostapd_get_oper_chwidth(iface->conf) ==
 			    CONF_OPER_CHWIDTH_80MHZ &&
 			    !acs_usable_bw_chan(chan, ACS_BW80)) {
-				wpa_printf(MSG_DEBUG,
+				wpa_printf(MSG_WARNING,
 					   "ACS: Channel %d: not allowed as primary channel for 80 MHz bandwidth",
 					   chan->chan);
 				continue;
@@ -860,7 +860,7 @@ acs_find_ideal_chan_mode(struct hostapd_
 			if (hostapd_get_oper_chwidth(iface->conf) ==
 			    CONF_OPER_CHWIDTH_160MHZ &&
 			    !acs_usable_bw_chan(chan, ACS_BW160)) {
-				wpa_printf(MSG_DEBUG,
+				wpa_printf(MSG_WARNING,
 					   "ACS: Channel %d: not allowed as primary channel for 160 MHz bandwidth",
 					   chan->chan);
 				continue;
@@ -878,7 +878,7 @@ acs_find_ideal_chan_mode(struct hostapd_
 				break;
 
 			if (!chan_bw_allowed(adj_chan, bw, 1, 0)) {
-				wpa_printf(MSG_DEBUG,
+				wpa_printf(MSG_WARNING,
 					   "ACS: PRI Channel %d: secondary channel %d BW %u is not supported",
 					   chan->chan, adj_chan->chan, bw);
 				break;
@@ -899,7 +899,7 @@ acs_find_ideal_chan_mode(struct hostapd_
 		}
 
 		if (j != n_chans) {
-			wpa_printf(MSG_DEBUG, "ACS: Channel %d: not enough bandwidth",
+			wpa_printf(MSG_WARNING, "ACS: Channel %d: not enough bandwidth",
 				   chan->chan);
 			continue;
 		}
@@ -973,11 +973,11 @@ acs_find_ideal_chan_mode(struct hostapd_
 
 		if (bias) {
 			factor *= bias->bias;
-			wpa_printf(MSG_DEBUG,
+			wpa_printf(MSG_WARNING,
 				   "ACS:  * channel %d: total interference = %Lg (%f bias)",
 				   chan->chan, factor, bias->bias);
 		} else {
-			wpa_printf(MSG_DEBUG,
+			wpa_printf(MSG_WARNING,
 				   "ACS:  * channel %d: total interference = %Lg",
 				   chan->chan, factor);
 		}
@@ -1032,10 +1032,13 @@ acs_find_ideal_chan(struct hostapd_iface
 
 	/* TODO: HT40- support */
 
-	if (iface->conf->ieee80211n &&
-	    iface->conf->secondary_channel == -1) {
-		wpa_printf(MSG_ERROR, "ACS: HT40- is not supported yet. Please try HT40+");
-		return NULL;
+	// Ignore HT40- issue if manual acs was triggered
+	if (iface->manual_acs_triggered == false) {
+		if (iface->conf->ieee80211n &&
+		    iface->conf->secondary_channel == -1) {
+			wpa_printf(MSG_ERROR, "ACS: HT40- is not supported yet. Please try HT40+");
+			return NULL;
+		}
 	}
 
 	if (iface->conf->ieee80211n &&
@@ -1055,13 +1058,16 @@ acs_find_ideal_chan(struct hostapd_iface
 		}
 	}
 
+	wpa_printf(MSG_WARNING, "ACS(%s) n_chans=%d 80211n=%d 80211ac=%d 80211xx=%d secondary_channel=%d", iface->phy, n_chans, iface->conf->ieee80211n, iface->conf->ieee80211ac, iface->conf->ieee80211ax, iface->conf->secondary_channel);
 	bw = num_chan_to_bw(n_chans);
 
 bw_selected:
+	// Register the bw for later use
+	iface->conf->bw=bw;
 	/* TODO: VHT/HE80+80. Update acs_adjust_center_freq() too. */
 
-	wpa_printf(MSG_DEBUG,
-		   "ACS: Survey analysis for selected bandwidth %d MHz", bw);
+	wpa_printf(MSG_WARNING,
+		   "ACS(%s): Survey analysis for selected bandwidth %d MHz", iface->phy, bw);
 
 	for (i = 0; i < iface->num_hw_features; i++) {
 		mode = &iface->hw_features[i];
@@ -1072,8 +1078,8 @@ bw_selected:
 	}
 
 	if (ideal_chan) {
-		wpa_printf(MSG_DEBUG, "ACS: Ideal channel is %d (%d MHz) with total interference factor of %Lg",
-			   ideal_chan->chan, ideal_chan->freq, ideal_factor);
+		wpa_printf(MSG_WARNING, "ACS(%s): Ideal channel is %d (%d MHz) with total interference factor of %Lg",
+			   iface->phy, ideal_chan->chan, ideal_chan->freq, ideal_factor);
 
 #ifdef CONFIG_IEEE80211BE
 		if (iface->conf->punct_acs_threshold)
@@ -1118,6 +1124,19 @@ static void acs_adjust_secondary(struct
 
 static void acs_adjust_center_freq(struct hostapd_iface *iface)
 {
+	hostapd_ctrl_update_fixup( iface->conf );
+
+#ifdef CONFIG_IEEE80211AX
+	wpa_printf(MSG_WARNING, "ACS(%s): channel %u, secondary_channel %d, vht_center %u, he_center %u",
+		iface->phy, iface->conf->channel, iface->conf->secondary_channel,
+		iface->conf->vht_oper_centr_freq_seg0_idx, iface->conf->he_oper_centr_freq_seg0_idx);
+#else
+	wpa_printf(MSG_WARNING, "ACS(%s): channel %u, secondary_channel %d, vht_center %u",
+		iface->phy, iface->conf->channel, iface->conf->secondary_channel,
+		iface->conf->vht_oper_centr_freq_seg0_idx);
+#endif
+
+#if 0
 	int center;
 
 	wpa_printf(MSG_DEBUG, "ACS: Adjusting VHT center frequency");
@@ -1148,6 +1167,7 @@ static void acs_adjust_center_freq(struc
 	}
 
 	hostapd_set_oper_centr_freq_seg0_idx(iface->conf, center);
+#endif
 }
 
 
@@ -1244,7 +1264,7 @@ static void acs_scan_complete(struct hos
 
 	iface->scan_cb = NULL;
 
-	wpa_printf(MSG_DEBUG, "ACS: Using survey based algorithm (acs_num_scans=%d)",
+	wpa_printf(MSG_WARNING, "ACS: Using survey based algorithm (acs_num_scans=%d)",
 		   iface->conf->acs_num_scans);
 
 	err = hostapd_drv_get_survey(iface->bss[0], 0);
@@ -1343,7 +1363,7 @@ static int acs_request_scan(struct hosta
 
 	iface->scan_cb = acs_scan_complete;
 
-	wpa_printf(MSG_DEBUG, "ACS: Scanning %d / %d",
+	wpa_printf(MSG_WARNING, "ACS: Scanning %d / %d",
 		   iface->acs_num_completed_scans + 1,
 		   iface->conf->acs_num_scans);
 
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -1171,6 +1171,8 @@ struct hostapd_config {
 #define AIRTIME_MODE_MAX (__AIRTIME_MODE_MAX - 1)
 #endif /* CONFIG_AIRTIME_POLICY */
 
+	u32 bw;
+
 	int ieee80211be;
 #ifdef CONFIG_IEEE80211BE
 	enum oper_chan_width eht_oper_chwidth;
