Index: hostapd-2023-09-08-e5ccbfc6/src/ap/ubus.c
===================================================================
--- hostapd-2023-09-08-e5ccbfc6.orig/src/ap/ubus.c
+++ hostapd-2023-09-08-e5ccbfc6/src/ap/ubus.c
@@ -499,9 +499,9 @@ int compare_char(const void * a, const v
 }
 
 static int
-hostapd_bss_get_clients(struct ubus_context *ctx, struct ubus_object *obj,
+hostapd_bss_get_client_info(struct ubus_context *ctx, struct ubus_object *obj,
 			struct ubus_request_data *req, const char *method,
-			struct blob_attr *msg)
+			struct blob_attr *msg, bool caps_only)
 {
 	struct hostapd_data *hapd = container_of(obj, struct hostapd_data, ubus.obj);
 	struct hostap_sta_driver_data sta_driver_data;
@@ -578,26 +578,29 @@ hostapd_bss_get_clients(struct ubus_cont
 			blobmsg_add_string_buffer(&b);
 #endif
 
-		/* Driver information */
-		if (hostapd_drv_read_sta_data(hapd, &sta_driver_data, sta->addr) >= 0) {
-			r = blobmsg_open_table(&b, "bytes");
-			blobmsg_add_u64(&b, "rx", sta_driver_data.rx_bytes);
-			blobmsg_add_u64(&b, "tx", sta_driver_data.tx_bytes);
-			blobmsg_close_table(&b, r);
-			r = blobmsg_open_table(&b, "airtime");
-			blobmsg_add_u64(&b, "rx", sta_driver_data.rx_airtime);
-			blobmsg_add_u64(&b, "tx", sta_driver_data.tx_airtime);
-			blobmsg_close_table(&b, r);
-			r = blobmsg_open_table(&b, "packets");
-			blobmsg_add_u32(&b, "rx", sta_driver_data.rx_packets);
-			blobmsg_add_u32(&b, "tx", sta_driver_data.tx_packets);
-			blobmsg_close_table(&b, r);
-			r = blobmsg_open_table(&b, "rate");
-			/* Rate in kbits */
-			blobmsg_add_u32(&b, "rx", sta_driver_data.current_rx_rate * 100);
-			blobmsg_add_u32(&b, "tx", sta_driver_data.current_tx_rate * 100);
-			blobmsg_close_table(&b, r);
-			blobmsg_add_u32(&b, "signal", sta_driver_data.signal);
+		if (!caps_only)
+		{
+			/* Driver information */
+			if (hostapd_drv_read_sta_data(hapd, &sta_driver_data, sta->addr) >= 0) {
+				r = blobmsg_open_table(&b, "bytes");
+				blobmsg_add_u64(&b, "rx", sta_driver_data.rx_bytes);
+				blobmsg_add_u64(&b, "tx", sta_driver_data.tx_bytes);
+				blobmsg_close_table(&b, r);
+				r = blobmsg_open_table(&b, "airtime");
+				blobmsg_add_u64(&b, "rx", sta_driver_data.rx_airtime);
+				blobmsg_add_u64(&b, "tx", sta_driver_data.tx_airtime);
+				blobmsg_close_table(&b, r);
+				r = blobmsg_open_table(&b, "packets");
+				blobmsg_add_u32(&b, "rx", sta_driver_data.rx_packets);
+				blobmsg_add_u32(&b, "tx", sta_driver_data.tx_packets);
+				blobmsg_close_table(&b, r);
+				r = blobmsg_open_table(&b, "rate");
+				/* Rate in kbits */
+				blobmsg_add_u32(&b, "rx", sta_driver_data.current_rx_rate * 100);
+				blobmsg_add_u32(&b, "tx", sta_driver_data.current_tx_rate * 100);
+				blobmsg_close_table(&b, r);
+				blobmsg_add_u32(&b, "signal", sta_driver_data.signal);
+			}
 		}
 
 		hostapd_parse_capab_blobmsg(sta);
@@ -612,6 +615,22 @@ hostapd_bss_get_clients(struct ubus_cont
 }
 
 static int
+hostapd_bss_get_clients(struct ubus_context *ctx, struct ubus_object *obj,
+			struct ubus_request_data *req, const char *method,
+			struct blob_attr *msg)
+{
+	return hostapd_bss_get_client_info(ctx, obj, req, method, msg, false);
+}
+
+static int
+hostapd_bss_get_client_caps(struct ubus_context *ctx, struct ubus_object *obj,
+			struct ubus_request_data *req, const char *method,
+			struct blob_attr *msg)
+{
+	return hostapd_bss_get_client_info(ctx, obj, req, method, msg, true);
+}
+
+static int
 hostapd_bss_get_features(struct ubus_context *ctx, struct ubus_object *obj,
 			struct ubus_request_data *req, const char *method,
 			struct blob_attr *msg)
@@ -1895,6 +1914,7 @@ hostapd_bss_get_sta_ies(struct ubus_cont
 static const struct ubus_method bss_methods[] = {
 	UBUS_METHOD_NOARG("reload", hostapd_bss_reload),
 	UBUS_METHOD_NOARG("get_clients", hostapd_bss_get_clients),
+	UBUS_METHOD_NOARG("get_client_caps", hostapd_bss_get_client_caps),
 #ifdef CONFIG_TAXONOMY
 	UBUS_METHOD("get_sta_ies", hostapd_bss_get_sta_ies, addr_policy),
 #endif
