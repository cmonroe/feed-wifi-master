--- a/mt7915/mcu.c
+++ b/mt7915/mcu.c
@@ -3373,6 +3373,30 @@ int mt7915_mcu_set_txpower_frame(struct
 				 sizeof(req), true);
 }
 
+static int mt7915_mcu_set_sku_path_en(struct mt7915_phy *phy, bool enable)
+{
+	struct mt7915_dev *dev = phy->dev;
+	struct mt7915_sku {
+		u8 format_id;
+		u8 sku_enable;
+		u8 band_idx;
+		u8 rsv;
+	} __packed req = {
+		.format_id = TX_POWER_LIMIT_PATH_ENABLE,
+		.band_idx = phy->mt76->band_idx,
+		.sku_enable = enable,
+	};
+	int ret;
+
+	ret = mt76_mcu_send_msg(&dev->mt76,
+				MCU_EXT_CMD(TX_POWER_FEATURE_CTRL), &req,
+				sizeof(req), true);
+	if (ret)
+		return ret;
+
+	return 0;
+}
+
 int mt7915_mcu_set_txpower_sku(struct mt7915_phy *phy)
 {
 #define TX_POWER_LIMIT_TABLE_RATE	0
@@ -3399,6 +3423,8 @@ int mt7915_mcu_set_txpower_sku(struct mt
 					      &la, tx_power);
 	mphy->txpower_cur = tx_power;
 
+	mt7915_mcu_set_sku_path_en(phy, false);
+
 	skb = mt76_mcu_msg_alloc(&dev->mt76, NULL,
 				 sizeof(hdr) + MT7915_SKU_RATE_NUM);
 	if (!skb)
@@ -3468,8 +3494,16 @@ int mt7915_mcu_set_txpower_sku(struct mt
 		skb_put_data(skb, buf, 10);
 	}
 
-	return mt76_mcu_skb_send_msg(&dev->mt76, skb,
+	ret = mt76_mcu_skb_send_msg(&dev->mt76, skb,
 				     MCU_EXT_CMD(TX_POWER_FEATURE_CTRL), true);
+	if (ret)
+		return ret;
+
+#ifdef MTK_DEBUG
+	return mt7915_mcu_set_sku_path_en(phy, !dev->dbg.sku_disable);
+#else
+	return mt7915_mcu_set_sku_path_en(phy, true);
+#endif
 }
 
 int mt7915_mcu_get_txpower_sku(struct mt7915_phy *phy, s8 *txpower, int len,
@@ -3555,13 +3589,9 @@ int mt7915_mcu_set_sku_en(struct mt7915_
 	if (ret)
 		return ret;
 
-	pr_info("%s: enable = %d\n", __func__, enable);
+	dev_info(dev->mt76.dev,"%s: enable = %d\n", __func__, enable);
 
-	req.format_id = TX_POWER_LIMIT_PATH_ENABLE;
-
-	return mt76_mcu_send_msg(&dev->mt76,
-				 MCU_EXT_CMD(TX_POWER_FEATURE_CTRL), &req,
-				 sizeof(req), true);
+	return 0;
 }
 
 int mt7915_mcu_set_ser(struct mt7915_dev *dev, u8 action, u8 set, u8 band)
