From 1834f3214b1aeb457557e652bd5e5f43bc51c27b Mon Sep 17 00:00:00 2001
Message-Id: <1834f3214b1aeb457557e652bd5e5f43bc51c27b.1651521948.git.ryder.lee@mediatek.com>
In-Reply-To: <40f31a4550ff357468798a5950a62ceec396cbeb.1651521948.git.ryder.lee@mediatek.com>
References: <40f31a4550ff357468798a5950a62ceec396cbeb.1651521948.git.ryder.lee@mediatek.com>
From: Ryder Lee <ryder.lee@mediatek.com>
Date: Sun, 1 May 2022 13:43:27 +0800
Subject: [PATCH 2/3] mt76: mt7915: introduce mt7915_mac_severe_check()

In rare cases, TRB pointers might be out of sync leads to RMAC stopping
Rx that requires minimal recovery, so add this helper to periodically
check TRB status.

Signed-off-by: Ryder Lee <ryder.lee@mediatek.com>
---
 .../net/wireless/mediatek/mt76/mt7915/mac.c   | 27 +++++++++++++++++++
 .../net/wireless/mediatek/mt76/mt7915/regs.h  |  8 ++++++
 2 files changed, 35 insertions(+)

--- a/mt7915/mac.c
+++ b/mt7915/mac.c
@@ -2428,6 +2428,42 @@ void mt7915_mac_update_stats(struct mt79
 	}
 }
 
+static void mt7915_mac_severe_check(struct mt7915_phy *phy)
+{
+	struct mt7915_dev *dev = phy->dev;
+	bool ext_phy = phy != &dev->phy;
+	u32 val;
+
+	if (!phy->omac_mask)
+		return;
+
+	/* In rare cases, TRB pointers might be out of sync leads to RMAC
+	 * stopping Rx, so check status periodically to see if TRB hardware
+	 * requires minimal recovery.
+	 */
+	val = mt76_rr(dev, MT_TRB_RXPSR0(phy->band_idx));
+
+	if ((FIELD_GET(MT_TRB_RXPSR0_RX_RMAC_PTR, val) !=
+	     FIELD_GET(MT_TRB_RXPSR0_RX_WTBL_PTR, val)) &&
+	    (FIELD_GET(MT_TRB_RXPSR0_RX_RMAC_PTR, phy->trb_last) !=
+	     FIELD_GET(MT_TRB_RXPSR0_RX_WTBL_PTR, phy->trb_last)) &&
+	    val == phy->trb_last)
+	{
+		dev_err(dev->mt76.dev, "TRB pointers out of sync val=%08x trb_last=%08x", 
+			val, phy->trb_last);
+
+		dev_err(dev->mt76.dev, "rxbsr0=%08x rxbsr1=%08x rxbsr2=%08x",
+			mt76_rr(dev, MT_TRB_RXBSR0(phy->band_idx)),
+			mt76_rr(dev, MT_TRB_RXBSR1(phy->band_idx)),
+			mt76_rr(dev, MT_TRB_RXBSR2(phy->band_idx))); 
+
+		mt7915_mcu_set_ser(dev, SER_RECOVER, SER_SET_RECOVER_L3_RX_ABORT,
+				   ext_phy);
+	}
+
+	phy->trb_last = val;
+}
+
 void mt7915_mac_sta_rc_work(struct work_struct *work)
 {
 	struct mt7915_dev *dev = container_of(work, struct mt7915_dev, rc_work);
@@ -2480,6 +2516,7 @@ void mt7915_mac_work(struct work_struct
 		mphy->mac_work_count = 0;
 
 		mt7915_mac_update_stats(phy);
+		mt7915_mac_severe_check(phy);
 	}
 
 	mutex_unlock(&mphy->dev->mutex);
--- a/mt7915/regs.h
+++ b/mt7915/regs.h
@@ -183,6 +183,18 @@ enum offs_rev {
 #define MT_MDP_TOP_DBG_CTRL			MT_MDP(0x0dc)
 #define MT_MDP_TOP_DBG_CTRL_ENQ_MODE		BIT(30)
 
+/* TRB: band 0(0x820e1000), band 1(0x820f1000) */
+#define MT_WF_TRB_BASE(_band)		((_band) ? 0x820f1000 : 0x820e1000)
+#define MT_WF_TRB(_band, ofs)		(MT_WF_TRB_BASE(_band) + (ofs))
+
+#define MT_TRB_RXBSR0(_band)		MT_WF_TRB(_band, 0x030)
+#define MT_TRB_RXBSR1(_band)		MT_WF_TRB(_band, 0x034)
+#define MT_TRB_RXBSR2(_band)		MT_WF_TRB(_band, 0x038)
+
+#define MT_TRB_RXPSR0(_band)		MT_WF_TRB(_band, 0x03c)
+#define MT_TRB_RXPSR0_RX_WTBL_PTR	GENMASK(25, 16)
+#define MT_TRB_RXPSR0_RX_RMAC_PTR	GENMASK(9, 0)
+
 /* TMAC: band 0(0x820e4000), band 1(0x820f4000) */
 #define MT_WF_TMAC_BASE(_band)		((_band) ? 0x820f4000 : 0x820e4000)
 #define MT_WF_TMAC(_band, ofs)		(MT_WF_TMAC_BASE(_band) + (ofs))
--- a/mt7915/mt7915.h
+++ b/mt7915/mt7915.h
@@ -284,6 +284,8 @@ struct mt7915_phy {
 	struct mib_stats mib;
 	struct mt76_channel_state state_ts;
 
+	u32 trb_last;
+
 #ifdef CONFIG_NL80211_TESTMODE
 	struct {
 		u32 *reg_backup;
