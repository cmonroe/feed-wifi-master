From 57b17637f4ccd63e18957713a5947a76a2227359 Mon Sep 17 00:00:00 2001
From: Allen Ye <allen.ye@mediatek.com>
Date: Fri, 12 Jul 2024 16:58:57 +0800
Subject: [PATCH 176/195] mtk: mt76: mt7996: Add lpi support with sku_idx and
 enhancement

Add lpi support with sku_idx and enhancement.
1. Add sku index for lpi sku table
2. Add lpi psd limit for psd country and compensate power by fw.
3. Add lpi mode mamangement from enhancement that use 1T to transmit mgmt
from in 80 MHz.

Signed-off-by: Allen Ye <allen.ye@mediatek.com>
---
 eeprom.c             |  13 +++--
 mt76.h               |   7 ++-
 mt76_connac3_mac.h   |  12 +++++
 mt7996/init.c        |   2 +-
 mt7996/mac.c         |   5 ++
 mt7996/main.c        |   5 +-
 mt7996/mcu.c         | 120 +++++++++++++++++++++++++++++++++++++++----
 mt7996/mcu.h         |   1 +
 mt7996/mt7996.h      |   3 +-
 mt7996/mtk_debugfs.c |   3 +-
 mt7996/testmode.c    |   2 +-
 mt7996/testmode.h    |  12 -----
 mt7996/vendor.c      | 116 +++++++++++++++++++++++++++++++++++++++++
 mt7996/vendor.h      |  15 ++++++
 14 files changed, 286 insertions(+), 30 deletions(-)

--- a/mt76_connac3_mac.h
+++ b/mt76_connac3_mac.h
@@ -204,6 +204,18 @@ enum tx_frag_idx {
 	MT_TX_FRAG_LAST
 };
 
+/* BW defined in FW hal_cal_flow_rom.h */
+enum {
+	FW_CDBW_20MHZ,
+	FW_CDBW_40MHZ,
+	FW_CDBW_80MHZ,
+	FW_CDBW_160MHZ,
+	FW_CDBW_320MHZ,
+	FW_CDBW_5MHZ,
+	FW_CDBW_10MHZ,
+	FW_CDBW_8080MHZ,
+};
+
 #define MT_CT_INFO_APPLY_TXD		BIT(0)
 #define MT_CT_INFO_COPY_HOST_TXD_ALL	BIT(1)
 #define MT_CT_INFO_MGMT_FRAME		BIT(2)
--- a/mt7996/mac.c
+++ b/mt7996/mac.c
@@ -933,6 +933,10 @@ void mt7996_mac_write_txwi(struct mt7996
 		}
 
 		val = FIELD_PREP(MT_TXD6_TX_RATE, idx) | MT_TXD6_FIXED_BW;
+		if (dev->mt76.phys[band_idx]->cap.has_6ghz &&
+		    dev->mt76.lpi_bcn_enhance &&
+		    ieee80211_is_mgmt(hdr->frame_control))
+			val |= FIELD_PREP(MT_TXD6_BW, FW_CDBW_80MHZ);
 		txwi[6] |= cpu_to_le32(val);
 		txwi[3] |= cpu_to_le32(MT_TXD3_BA_DISABLE);
 	}
--- a/mt7996/main.c
+++ b/mt7996/main.c
@@ -562,6 +562,7 @@ static u8
 mt7996_get_rates_table(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 		       bool beacon, bool mcast)
 {
+#define FR_RATE_IDX_OFDM_6M 0x004b
 	struct mt76_vif *mvif = (struct mt76_vif *)vif->drv_priv;
 	struct mt76_phy *mphy = hw->priv;
 	u16 rate;
@@ -572,6 +573,9 @@ mt7996_get_rates_table(struct ieee80211_
 	if (beacon) {
 		struct mt7996_phy *phy = mphy->priv;
 
+		if (mphy->dev->lpi_bcn_enhance)
+			rate = FR_RATE_IDX_OFDM_6M;
+
 		/* odd index for driver, even index for firmware */
 		idx = MT7996_BEACON_RATES_TBL + 2 * phy->mt76->band_idx;
 		if (phy->beacon_rate != rate)
@@ -884,6 +888,7 @@ mt7996_get_stats(struct ieee80211_hw *hw
 
 u64 __mt7996_get_tsf(struct ieee80211_hw *hw, struct mt7996_vif *mvif)
 {
+#define FR_RATE_IDX_OFDM_6M 0x004b
 	struct mt7996_dev *dev = mt7996_hw_dev(hw);
 	struct mt7996_phy *phy = mt7996_hw_phy(hw);
 	union {
--- a/mt7996/mcu.c
+++ b/mt7996/mcu.c
@@ -4564,7 +4564,7 @@ int mt7996_mcu_set_fixed_rate_table(stru
 
 	if (beacon) {
 		req.spe_idx_sel = SPE_IXD_SELECT_TXD;
-		req.spe_idx = 24 + band_idx;
+		req.spe_idx = dev->mt76.mgmt_pwr_enhance ? 0 : 24 + band_idx;
 		phy->beacon_rate = rate_idx;
 	} else {
 		req.spe_idx_sel = SPE_IXD_SELECT_BMC_WTBL;
@@ -4739,6 +4739,22 @@ mt7996_update_max_txpower_cur(struct mt7
 		mphy->txpower_cur = e2p_power_limit;
 }
 
+bool mt7996_is_psd_country(char *country)
+{
+	char psd_country_list[][3] = {"US", "KR", "BR", "CL", "MY", ""};
+	int i;
+
+	if (strlen(country) != 2)
+		return 0;
+
+	for (i = 0; psd_country_list[i][0] != '\0'; i++) {
+		if (!strncmp(country, psd_country_list[i], 2))
+			return 1;
+	}
+
+	return 0;
+}
+
 int mt7996_mcu_set_txpower_sku(struct mt7996_phy *phy)
 {
 #define TX_POWER_LIMIT_TABLE_RATE	0
@@ -4787,7 +4803,36 @@ int mt7996_mcu_set_txpower_sku(struct mt
 	skb_put_data(skb, &req, sizeof(req));
 	/* cck and ofdm */
 	skb_put_data(skb, &la.cck, sizeof(la.cck));
-	skb_put_data(skb, &la.ofdm, sizeof(la.ofdm));
+
+	/* FW would compensate for PSD countries
+	 * driver doesn't need to do it
+	 */
+	if (phy->mt76->cap.has_6ghz && mphy->dev->lpi_psd &&
+	    !mt7996_is_psd_country(dev->mt76.alpha2)) {
+		switch (mphy->chandef.width) {
+		case NL80211_CHAN_WIDTH_20:
+			skb_put_data(skb, &la.eht[3], sizeof(la.ofdm));
+			break;
+		case NL80211_CHAN_WIDTH_40:
+			skb_put_data(skb, &la.eht[4], sizeof(la.ofdm));
+			break;
+		case NL80211_CHAN_WIDTH_80:
+			skb_put_data(skb, &la.eht[5], sizeof(la.ofdm));
+			break;
+		case NL80211_CHAN_WIDTH_160:
+			skb_put_data(skb, &la.eht[6], sizeof(la.ofdm));
+			break;
+		case NL80211_CHAN_WIDTH_320:
+			skb_put_data(skb, &la.eht[7], sizeof(la.ofdm));
+			break;
+		default:
+			skb_put_data(skb, &la.ofdm, sizeof(la.ofdm));
+			break;
+		}
+	} else {
+		skb_put_data(skb, &la.ofdm, sizeof(la.ofdm));
+	}
+
 	/* ht20 */
 	skb_put_data(skb, &la.mcs[0], 8);
 	/* ht40 */
@@ -4824,8 +4869,41 @@ int mt7996_mcu_set_txpower_sku(struct mt
 
 	skb_put_data(skb, &req, sizeof(req));
 	skb_put_data(skb, &la_path.cck, sizeof(la_path.cck));
-	skb_put_data(skb, &la_path.ofdm, sizeof(la_path.ofdm));
-	skb_put_data(skb, &la_path.ofdm_bf, sizeof(la_path.ofdm_bf));
+
+	/* FW would NOT compensate in the case of BF backoff table
+	 * driver needs to compensate for LPI PSD
+	 */
+	if (phy->mt76->cap.has_6ghz && mphy->dev->lpi_psd) {
+		switch (mphy->chandef.width) {
+		case NL80211_CHAN_WIDTH_20:
+			skb_put_data(skb, &la_path.ru[5], sizeof(la_path.ofdm));
+			skb_put_data(skb, &la_path.ru_bf[5], sizeof(la_path.ofdm_bf));
+			break;
+		case NL80211_CHAN_WIDTH_40:
+			skb_put_data(skb, &la_path.ru[6], sizeof(la_path.ofdm));
+			skb_put_data(skb, &la_path.ru_bf[6], sizeof(la_path.ofdm_bf));
+			break;
+		case NL80211_CHAN_WIDTH_80:
+			skb_put_data(skb, &la_path.ru[8], sizeof(la_path.ofdm));
+			skb_put_data(skb, &la_path.ru_bf[8], sizeof(la_path.ofdm_bf));
+			break;
+		case NL80211_CHAN_WIDTH_160:
+			skb_put_data(skb, &la_path.ru[11], sizeof(la_path.ofdm));
+			skb_put_data(skb, &la_path.ru_bf[11], sizeof(la_path.ofdm_bf));
+			break;
+		case NL80211_CHAN_WIDTH_320:
+			skb_put_data(skb, &la_path.ru[15], sizeof(la_path.ofdm));
+			skb_put_data(skb, &la_path.ru_bf[15], sizeof(la_path.ofdm_bf));
+			break;
+		default:
+			skb_put_data(skb, &la_path.ofdm, sizeof(la_path.ofdm));
+			skb_put_data(skb, &la_path.ofdm_bf, sizeof(la_path.ofdm_bf));
+			break;
+		}
+	} else {
+		skb_put_data(skb, &la_path.ofdm, sizeof(la_path.ofdm));
+		skb_put_data(skb, &la_path.ofdm_bf, sizeof(la_path.ofdm_bf));
+	}
 
 	for (i = 0; i < 32; i++) {
 		bool bf = i % 2;
@@ -4839,6 +4917,31 @@ int mt7996_mcu_set_txpower_sku(struct mt
 				     MCU_WM_UNI_CMD(TXPOWER), true);
 }
 
+int mt7996_mcu_set_lpi_psd(struct mt7996_phy *phy, u8 enable)
+{
+	struct mt7996_dev *dev = phy->dev;
+
+	struct {
+		u8 band_idx;
+		u8 _rsv[3];
+
+		__le16 tag;
+		__le16 len;
+		u8 lpi_enable;
+		u8 psd_limit;
+		u8 _rsv2[2];
+	} __packed req = {
+		.band_idx = phy->mt76->band_idx,
+		.tag = cpu_to_le16(UNI_BAND_CONFIG_LPI_CTRL),
+		.len = cpu_to_le16(sizeof(req) - 4),
+		.lpi_enable = enable,
+		.psd_limit = enable ? mt7996_is_psd_country(dev->mt76.alpha2) : 0,
+	};
+
+	return mt76_mcu_send_msg(&phy->dev->mt76, MCU_WM_UNI_CMD(BAND_CONFIG),
+				 &req, sizeof(req), false);
+}
+
 int mt7996_mcu_cp_support(struct mt7996_dev *dev, u8 mode)
 {
 	__le32 cp_mode;
--- a/mt7996/mcu.h
+++ b/mt7996/mcu.h
@@ -838,6 +838,7 @@ enum {
 	UNI_BAND_CONFIG_EDCCA_ENABLE = 0x05,
 	UNI_BAND_CONFIG_EDCCA_THRESHOLD = 0x06,
 	UNI_BAND_CONFIG_RTS_THRESHOLD = 0x08,
+	UNI_BAND_CONFIG_LPI_CTRL = 0x0d,
 };
 
 enum {
--- a/mt7996/mt7996.h
+++ b/mt7996/mt7996.h
@@ -803,6 +803,7 @@ void mt7996_vendor_register(struct mt799
 void mt7996_vendor_amnt_fill_rx(struct mt7996_phy *phy, struct sk_buff *skb);
 int mt7996_vendor_amnt_sta_remove(struct mt7996_phy *phy,
 				  struct ieee80211_sta *sta);
+int mt7996_mcu_set_lpi_psd(struct mt7996_phy *phy, u8 enable);
 #endif
 
 int mt7996_mcu_edcca_enable(struct mt7996_phy *phy, bool enable);
--- a/mt7996/mtk_debugfs.c
+++ b/mt7996/mtk_debugfs.c
@@ -3037,6 +3037,8 @@ int mt7996_mtk_init_debugfs(struct mt799
 	debugfs_create_file("sr_stats", 0400, dir, phy, &mt7996_sr_stats_fops);
 	debugfs_create_file("sr_scene_cond", 0400, dir, phy, &mt7996_sr_scene_cond_fops);
 
+	debugfs_create_bool("mgmt_pwr_enhance", 0600, dir, &dev->mt76.mgmt_pwr_enhance);
+
 	return 0;
 }
 
--- a/mt7996/vendor.c
+++ b/mt7996/vendor.c
@@ -70,6 +70,14 @@ pp_ctrl_policy[NUM_MTK_VENDOR_ATTRS_PP_C
 	[MTK_VENDOR_ATTR_PP_MODE] = { .type = NLA_U8 },
 };
 
+static struct nla_policy
+txpower_ctrl_policy[NUM_MTK_VENDOR_ATTRS_TXPOWER_CTRL] = {
+	[MTK_VENDOR_ATTR_TXPOWER_CTRL_LPI_PSD] = { .type = NLA_U8 },
+	[MTK_VENDOR_ATTR_TXPOWER_CTRL_SKU_IDX] = { .type = NLA_U8 },
+	[MTK_VENDOR_ATTR_TXPOWER_CTRL_LPI_BCN_ENHANCE] = { .type = NLA_U8 },
+	[MTK_VENDOR_ATTR_TXPOWER_CTRL_LINK_ID] = { .type = NLA_U8 },
+};
+
 struct mt7996_amnt_data {
 	u8 idx;
 	u8 addr[ETH_ALEN];
@@ -636,6 +644,100 @@ static int mt7996_vendor_pp_ctrl(struct
 	return err;
 }
 
+static int mt7996_vendor_txpower_ctrl(struct wiphy *wiphy,
+				      struct wireless_dev *wdev,
+				      const void *data,
+				      int data_len)
+{
+#define FR_RATE_IDX_OFDM_6M 0x004b
+	struct mt7996_dev *dev;
+	struct mt7996_phy *phy;
+	struct mt76_phy *mphy;
+	struct ieee80211_vif *vif = wdev_to_ieee80211_vif(wdev);
+	struct mt7996_vif *mvif = (struct mt7996_vif *)vif->drv_priv;
+	struct mt7996_bss_conf *mconf;
+	struct nlattr *tb[NUM_MTK_VENDOR_ATTRS_TXPOWER_CTRL];
+	struct mt76_power_limits la = {};
+	struct mt76_power_path_limits la_path = {};
+	int err;
+	u8 val, link_id = 0, idx;
+
+	err = nla_parse(tb, MTK_VENDOR_ATTR_TXPOWER_CTRL_MAX, data, data_len,
+			txpower_ctrl_policy, NULL);
+	if (err)
+		return err;
+
+
+	if (ieee80211_vif_is_mld(vif) && tb[MTK_VENDOR_ATTR_TXPOWER_CTRL_LINK_ID]) {
+		link_id = nla_get_u8(tb[MTK_VENDOR_ATTR_TXPOWER_CTRL_LINK_ID]);
+
+		if (link_id >= IEEE80211_LINK_UNSPECIFIED)
+			return -EINVAL;
+	}
+
+	rcu_read_lock();
+	mconf = rcu_dereference(mvif->link[link_id]);
+	if (!mconf || !mconf->phy) {
+		rcu_read_unlock();
+		return -EINVAL;
+	}
+
+	phy = mconf->phy;
+	rcu_read_unlock();
+
+	mphy = phy->mt76;
+
+	if (mphy->cap.has_6ghz &&
+	    tb[MTK_VENDOR_ATTR_TXPOWER_CTRL_LPI_PSD]) {
+		val = nla_get_u8(tb[MTK_VENDOR_ATTR_TXPOWER_CTRL_LPI_PSD]);
+		mphy->dev->lpi_psd = val;
+
+		err = mt7996_mcu_set_lpi_psd(phy, val);
+		if (err)
+			return err;
+	}
+
+	if (tb[MTK_VENDOR_ATTR_TXPOWER_CTRL_SKU_IDX]) {
+		mphy->sku_idx = nla_get_u8(tb[MTK_VENDOR_ATTR_TXPOWER_CTRL_SKU_IDX]);
+
+		if (mt76_find_power_limits_node(mphy) == NULL)
+			mphy->sku_idx = 0;
+
+		phy->sku_limit_en = true;
+		phy->sku_path_en = true;
+		mt76_get_rate_power_limits(mphy, mphy->chandef.chan, &la, &la_path, 127);
+		if (!la_path.ofdm[0])
+			phy->sku_path_en = false;
+
+		dev = phy->dev;
+		err = mt7996_mcu_set_tx_power_ctrl(phy, UNI_TXPOWER_SKU_POWER_LIMIT_CTRL,
+						   dev->dbg.sku_disable ? 0 : phy->sku_limit_en);
+		if (err)
+			return err;
+		err = mt7996_mcu_set_tx_power_ctrl(phy, UNI_TXPOWER_BACKOFF_POWER_LIMIT_CTRL,
+						   dev->dbg.sku_disable ? 0 : phy->sku_path_en);
+		if (err)
+			return err;
+	}
+
+	if (mphy->cap.has_6ghz &&
+	    tb[MTK_VENDOR_ATTR_TXPOWER_CTRL_LPI_BCN_ENHANCE]) {
+		val = nla_get_u8(tb[MTK_VENDOR_ATTR_TXPOWER_CTRL_LPI_BCN_ENHANCE]);
+		mphy->dev->lpi_bcn_enhance = val;
+		idx = MT7996_BEACON_RATES_TBL + 2 * phy->mt76->band_idx;
+
+		err = mt7996_mcu_set_fixed_rate_table(phy, idx, FR_RATE_IDX_OFDM_6M, true);
+		if (err)
+			return err;
+	}
+
+	err = mt7996_mcu_set_txpower_sku(phy);
+	if (err)
+		return err;
+
+	return 0;
+}
+
 static const struct wiphy_vendor_command mt7996_vendor_commands[] = {
 	{
 		.info = {
@@ -707,6 +809,17 @@ static const struct wiphy_vendor_command
 		.policy = pp_ctrl_policy,
 		.maxattr = MTK_VENDOR_ATTR_PP_CTRL_MAX,
 	},
+	{
+		.info = {
+			.vendor_id = MTK_NL80211_VENDOR_ID,
+			.subcmd = MTK_NL80211_VENDOR_SUBCMD_TXPOWER_CTRL,
+		},
+		.flags = WIPHY_VENDOR_CMD_NEED_NETDEV |
+			 WIPHY_VENDOR_CMD_NEED_RUNNING,
+		.doit = mt7996_vendor_txpower_ctrl,
+		.policy = txpower_ctrl_policy,
+		.maxattr = MTK_VENDOR_ATTR_TXPOWER_CTRL_MAX,
+	},
 };
 
 void mt7996_vendor_register(struct mt7996_phy *phy)
--- a/mt7996/vendor.h
+++ b/mt7996/vendor.h
@@ -10,6 +10,7 @@ enum mtk_nl80211_vendor_subcmds {
 	MTK_NL80211_VENDOR_SUBCMD_IBF_CTRL = 0xc9,
 	MTK_NL80211_VENDOR_SUBCMD_BSS_COLOR_CTRL = 0xca,
 	MTK_NL80211_VENDOR_SUBCMD_PP_CTRL = 0xcc,
+	MTK_NL80211_VENDOR_SUBCMD_TXPOWER_CTRL = 0xce,
 };
 
 enum mtk_vendor_attr_edcca_ctrl {
@@ -137,4 +138,18 @@ enum mtk_vendor_attr_pp_ctrl {
 		NUM_MTK_VENDOR_ATTRS_PP_CTRL - 1
 };
 
+enum mtk_vendor_attr_txpower_ctrl {
+	MTK_VENDOR_ATTR_TXPOWER_CTRL_UNSPEC,
+
+	MTK_VENDOR_ATTR_TXPOWER_CTRL_LPI_PSD,
+	MTK_VENDOR_ATTR_TXPOWER_CTRL_SKU_IDX,
+	MTK_VENDOR_ATTR_TXPOWER_CTRL_LPI_BCN_ENHANCE,
+	MTK_VENDOR_ATTR_TXPOWER_CTRL_LINK_ID,
+
+	/* keep last */
+	NUM_MTK_VENDOR_ATTRS_TXPOWER_CTRL,
+	MTK_VENDOR_ATTR_TXPOWER_CTRL_MAX =
+		NUM_MTK_VENDOR_ATTRS_TXPOWER_CTRL - 1
+};
+
 #endif
