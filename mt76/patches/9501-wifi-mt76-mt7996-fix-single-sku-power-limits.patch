--- a/eeprom.c
+++ b/eeprom.c
@@ -541,6 +541,119 @@ s8 mt76_get_rate_power_limits(struct mt7
 }
 EXPORT_SYMBOL_GPL(mt76_get_rate_power_limits);
 
+s8 mt76_mt7996_get_rate_power_limits(struct mt76_phy *phy,
+			      struct ieee80211_channel *chan,
+			      struct mt76_power_limits *dest,
+			      struct mt76_mt7996_power_path_limits *dest_path,
+			      s8 target_power)
+{
+	struct mt76_dev *dev = phy->dev;
+	struct device_node *np;
+	const __be32 *val;
+	char name[16];
+	u32 mcs_rates = dev->drv->mcs_rates;
+	char band;
+	size_t len;
+	s8 max_power = -127;
+	s8 max_power_backoff = -127;
+	s8 txs_delta;
+	int n_chains = hweight16(phy->chainmask);
+	s8 target_power_combine = target_power + mt76_tx_power_nss_delta(n_chains);
+
+	if (!mcs_rates)
+		mcs_rates = 12;
+
+	memset(dest, target_power, sizeof(*dest));
+	if (dest_path != NULL)
+		memset(dest_path, 0, sizeof(*dest_path));
+
+	if (!IS_ENABLED(CONFIG_OF))
+		return target_power;
+
+	np = mt76_find_power_limits_node(phy);
+	if (!np)
+		return target_power;
+
+	switch (chan->band) {
+	case NL80211_BAND_2GHZ:
+		band = '2';
+		break;
+	case NL80211_BAND_5GHZ:
+		band = '5';
+		break;
+	case NL80211_BAND_6GHZ:
+		band = '6';
+		break;
+	default:
+		return target_power;
+	}
+
+	snprintf(name, sizeof(name), "txpower-%cg", band);
+	np = of_get_child_by_name(np, name);
+	if (!np)
+		return target_power;
+
+	np = mt76_find_channel_node(np, chan);
+	if (!np)
+		return target_power;
+
+	txs_delta = mt76_get_txs_delta(np, hweight16(phy->chainmask));
+
+	val = mt76_get_of_array(np, "rates-cck", &len, ARRAY_SIZE(dest->cck));
+	mt76_apply_array_limit(dest->cck, ARRAY_SIZE(dest->cck), val,
+			       target_power, txs_delta, &max_power);
+
+	val = mt76_get_of_array(np, "rates-ofdm",
+				&len, ARRAY_SIZE(dest->ofdm));
+	mt76_apply_array_limit(dest->ofdm, ARRAY_SIZE(dest->ofdm), val,
+			       target_power, txs_delta, &max_power);
+
+	val = mt76_get_of_array(np, "rates-mcs", &len, mcs_rates + 1);
+	mt76_apply_multi_array_limit(dest->mcs[0], ARRAY_SIZE(dest->mcs[0]),
+				     ARRAY_SIZE(dest->mcs), val, len,
+				     target_power, txs_delta, &max_power);
+
+	val = mt76_get_of_array(np, "rates-ru", &len, ARRAY_SIZE(dest->ru[0]) + 1);
+	mt76_apply_multi_array_limit(dest->ru[0], ARRAY_SIZE(dest->ru[0]),
+				     ARRAY_SIZE(dest->ru), val, len,
+				     target_power, txs_delta, &max_power);
+
+	val = mt76_get_of_array(np, "rates-eht", &len, ARRAY_SIZE(dest->eht[0]) + 1);
+	mt76_apply_multi_array_limit(dest->eht[0], ARRAY_SIZE(dest->eht[0]),
+				     ARRAY_SIZE(dest->eht), val, len,
+				     target_power, txs_delta, &max_power);
+
+	if (dest_path == NULL)
+		return max_power;
+
+	max_power_backoff = max_power;
+
+	val = mt76_get_of_array(np, "paths-cck", &len, ARRAY_SIZE(dest_path->cck));
+	mt76_apply_array_limit(dest_path->cck, ARRAY_SIZE(dest_path->cck), val,
+			       target_power_combine, txs_delta, &max_power_backoff);
+
+	val = mt76_get_of_array(np, "paths-ofdm", &len, ARRAY_SIZE(dest_path->ofdm));
+	mt76_apply_array_limit(dest_path->ofdm, ARRAY_SIZE(dest_path->ofdm), val,
+			       target_power_combine, txs_delta, &max_power_backoff);
+
+	val = mt76_get_of_array(np, "paths-ofdm-bf", &len, ARRAY_SIZE(dest_path->ofdm_bf));
+	mt76_apply_array_limit(dest_path->ofdm_bf, ARRAY_SIZE(dest_path->ofdm_bf), val,
+			       target_power_combine, txs_delta, &max_power_backoff);
+
+	val = mt76_get_of_array(np, "paths-ru", &len, ARRAY_SIZE(dest_path->ru[0]) + 1);
+	mt76_apply_multi_array_limit(dest_path->ru[0], ARRAY_SIZE(dest_path->ru[0]),
+				     ARRAY_SIZE(dest_path->ru), val, len,
+				     target_power_combine, txs_delta, &max_power_backoff);
+
+	val = mt76_get_of_array(np, "paths-ru-bf", &len, ARRAY_SIZE(dest_path->ru_bf[0]) + 1);
+	mt76_apply_multi_array_limit(dest_path->ru_bf[0], ARRAY_SIZE(dest_path->ru_bf[0]),
+				     ARRAY_SIZE(dest_path->ru_bf), val, len,
+				     target_power_combine, txs_delta, &max_power_backoff);
+
+	return max_power;
+}
+EXPORT_SYMBOL_GPL(mt76_mt7996_get_rate_power_limits);
+
 int
 mt76_eeprom_init(struct mt76_dev *dev, int len)
 {
--- a/mt76.h
+++ b/mt76.h
@@ -1126,6 +1126,14 @@ struct mt76_power_limits {
 	} path;
 };
 
+struct mt76_mt7996_power_path_limits {
+	s8 cck[5];
+	s8 ofdm[5];
+	s8 ofdm_bf[4];
+	s8 ru[16][15];
+	s8 ru_bf[16][15];
+};
+
 struct mt76_ethtool_worker_info {
 	u64 *data;
 	int idx;
@@ -1758,6 +1766,12 @@ static inline bool mt76_queue_is_rx(stru
 	return false;
 }
 
+s8 mt76_mt7996_get_rate_power_limits(struct mt76_phy *phy,
+			      struct ieee80211_channel *chan,
+			      struct mt76_power_limits *dest,
+			      struct mt76_mt7996_power_path_limits *dest_path,
+			      s8 target_power);
+
 static inline bool mt76_queue_is_wed_tx_free(struct mt76_queue *q)
 {
 	return (q->flags & MT_QFLAG_WED) &&
--- a/mt7996/mcu.h
+++ b/mt7996/mcu.h
@@ -945,9 +945,34 @@ enum {
 	UNI_CMD_THERMAL_PROTECT_DUTY_CONFIG,
 };
 
-enum {
-	UNI_TXPOWER_POWER_LIMIT_TABLE_CTRL = 4,
-};
+struct tx_power_ctrl {
+	u8 _rsv[4];
+
+	__le16 tag;
+	__le16 len;
+
+	u8 power_ctrl_id;
+	union {
+		bool sku_enable;
+		bool ate_mode_enable;
+		bool percentage_ctrl_enable;
+		bool bf_backoff_enable;
+		u8 show_info_category;
+		u8 power_drop_level;
+	};
+	u8 band_idx;
+	u8 rsv[1];
+} __packed;
+
+ enum {
+	UNI_TXPOWER_SKU_POWER_LIMIT_CTRL = 0,
+	UNI_TXPOWER_PERCENTAGE_CTRL = 1,
+	UNI_TXPOWER_PERCENTAGE_DROP_CTRL = 2,
+	UNI_TXPOWER_BACKOFF_POWER_LIMIT_CTRL = 3,
+ 	UNI_TXPOWER_POWER_LIMIT_TABLE_CTRL = 4,
+	UNI_TXPOWER_ATE_MODE_CTRL = 6,
+	UNI_TXPOWER_SHOW_INFO = 7,
+ };
 
 enum {
 	UNI_CMD_ACCESS_REG_BASIC = 0x0,
--- a/mt7996/mcu.c
+++ b/mt7996/mcu.c
@@ -4973,7 +4973,7 @@ int mt7996_mcu_set_txpower_sku(struct mt
 		.band_idx = phy->mt76->band_idx,
 	};
 	struct mt76_power_limits la = {};
-	struct mt76_power_path_limits la_path = {};
+	struct mt76_mt7996_power_path_limits la_path = {};
 	struct sk_buff *skb;
 	int i, ret, txpower_limit;
 
@@ -4982,7 +4982,7 @@ int mt7996_mcu_set_txpower_sku(struct mt
 	txpower_limit = mt7996_get_power_bound(phy, hw->conf.power_level);
 
 	if (phy->sku_limit_en) {
-		txpower_limit = mt76_get_rate_power_limits(mphy, mphy->chandef.chan,
+		txpower_limit = mt76_mt7996_get_rate_power_limits(mphy, mphy->chandef.chan,
 							   &la, &la_path, txpower_limit);
 		mt7996_update_max_txpower_cur(phy, txpower_limit);
 	} else {
--- a/mt7996/init.c
+++ b/mt7996/init.c
@@ -297,23 +297,23 @@ static void __mt7996_init_txpower(struct
 	int nss_delta = mt76_tx_power_nss_delta(nss);
 	int pwr_delta = mt7996_eeprom_get_power_delta(dev, sband->band);
 	struct mt76_power_limits limits;
-	struct mt76_power_path_limits limits_path;
+	struct mt76_mt7996_power_path_limits limits_path;
 	struct device_node *np;
 
 	phy->sku_limit_en = true;
-	phy->sku_path_en = true;
-	np = mt76_find_power_limits_node(&dev->mt76);
+	phy->sku_path_en = false;
+	np = mt76_find_power_limits_node(phy->mt76);
 	for (i = 0; i < sband->n_channels; i++) {
 		struct ieee80211_channel *chan = &sband->channels[i];
 		int target_power = mt7996_eeprom_get_target_power(dev, chan);
 
 		target_power += pwr_delta;
-		target_power = mt76_get_rate_power_limits(phy->mt76, chan,
+		target_power = mt76_mt7996_get_rate_power_limits(phy->mt76, chan,
 							  &limits,
 							  &limits_path,
 							  target_power);
-		if (!limits_path.ofdm[0])
-			phy->sku_path_en = false;
+		if (limits_path.ofdm[0])
+			phy->sku_path_en = true;
 
 		target_power += nss_delta;
 		target_power = DIV_ROUND_UP(target_power, 2);
--- a/mt7996/main.c
+++ b/mt7996/main.c
@@ -78,6 +78,12 @@ int mt7996_run(struct ieee80211_hw *hw)
 	phy->sr_enable = true;
 	phy->enhanced_sr_enable = true;
 
+	/* needed to re-apply power tables after SER */
+	ret = mt7996_mcu_set_txpower_sku(phy);
+
+	dev_info(dev->mt76.dev, "%s: sku enable = %d, path enable = %d\n", __func__,
+		dev->dbg.sku_disable ? 0 : phy->sku_limit_en, dev->dbg.sku_disable ? 0 : phy->sku_path_en);
+
 	ret = mt7996_mcu_set_tx_power_ctrl(phy, UNI_TXPOWER_SKU_POWER_LIMIT_CTRL,
 						dev->dbg.sku_disable ? 0 : phy->sku_limit_en);
 
--- a/mt7996/mtk_debugfs.c
+++ b/mt7996/mtk_debugfs.c
@@ -2500,7 +2500,7 @@ mt7996_get_txpower_info(struct file *fil
 	len += scnprintf(buf + len, size - len,
 			 "    Theraml Compensation Value: %d\n",
 			 basic_info->thermal_compensate_value);
-	np = mt76_find_power_limits_node(phy->mt76->dev);
+	np = mt76_find_power_limits_node(phy->mt76);
 	len += scnprintf(buf + len, size - len,
 			 "    RegDB:  %s\n",
 			 !np ? "enable" : "disable");
