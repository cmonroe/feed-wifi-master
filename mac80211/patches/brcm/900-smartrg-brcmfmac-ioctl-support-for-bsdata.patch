From: Koral Ilgun <koral.ilgun@smartrg.com>
Date: Tue 14 Jan 2020 19:35:48 -0800
Subject: brcmfmac: bs_data and chanim_stats retrieval via ioctl

Signed-off-by: Koral Ilgun <koral.ilgun@smartrg.com>
--
 core.c |  147 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 core.h |    3 -
 fwil.c |    4 +
 3 files changed, 152 insertions(+), 2 deletions(-)

--- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/core.c
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/core.c
@@ -37,6 +37,10 @@
 
 #define	D11_PHY_HDR_LEN				6
 
+/* A subset of WLC ioctl's from target/linux/bcm5301x/files-3.18/brcm/arm/dhd/src/supp/include/wlioctl.h */
+#define WLC_GET_VAR	262
+#define WLC_SET_VAR	263
+
 struct d11rxhdr_le {
 	__le16 RxFrameSize;
 	u16 PAD;
@@ -253,6 +257,146 @@ static void brcmf_netdev_set_multicast_l
 	schedule_work(&ifp->multicast_work);
 }
 
+/* Linux network driver ioctl encoding - this is same as wl_ioctl from libwmd/src/api/broadcom.h, similar to dhd_ioctl */
+typedef struct brcmf_ioctl {
+        u32   cmd;    /* common ioctl definition */
+        void *buf;    /* pointer to user buffer */
+        u32   len;    /* length of user buffer */
+        u8    set;    /* get or set request (optional) */
+        u32   used;   /* bytes read or written (optional) */
+        u32   needed; /* bytes needed (optional) */
+} brcmf_ioctl_t;
+
+static int brcmf_netdev_ioctl(struct net_device *ndev, struct ifreq *ifr, int cmd)
+{
+	struct brcmf_if *ifp = netdev_priv(ndev);
+	struct brcmf_pub *drvr = ifp->drvr;
+	brcmf_ioctl_t ioc;
+	void *local_buf = NULL;
+	int ret = 0;
+	char *request="";
+
+	memset(&ioc, 0, sizeof(ioc));
+
+	switch (cmd) {
+		case SIOCDEVPRIVATE :
+#if 0
+			printk (KERN_ERR "%s: SIOCDEVPRIVATE\n", __FUNCTION__);
+#endif
+			break;
+		case SIOCGMIIPHY :
+			/* Unsupported - we know about this one already */
+			break;
+		default:
+			bphy_err(drvr, "Unsupported ioctl 0x%x on %s\n",
+				 cmd, brcmf_ifname(ifp));
+			return -ENOTSUPP;
+	}
+
+	/* Copy the ioc control structure part of ioctl request */
+	ret = copy_from_user(&ioc, ifr->ifr_data, sizeof(ioc));
+	if (ret) {
+		// This happens quite often for some reason, that's why it's commented out:
+		// bphy_err(drvr, "Failed to copy ioctl request from user space, ret %d len %d cmd %d\n", ret, ioc.len, ioc.cmd);
+		return -EFAULT;
+	}
+	else {
+		// bphy_err(drvr, "ioc.len %d ioc.cmd %d", ioc.len, ioc.cmd);
+	}
+
+	if ((ioc.cmd != WLC_GET_VAR) && (ioc.cmd != WLC_SET_VAR)) {
+		bphy_err(drvr, "Unsupported ioc.cmd %d on %s\n", ioc.cmd, brcmf_ifname(ifp));
+		ret = -ENOTSUPP;
+		goto done;
+	}
+
+	if (ioc.buf == NULL) {
+		bphy_err(drvr, "Unexpected NULL ioc.buf on %s\n", ioc.cmd, brcmf_ifname(ifp));
+		ret = -EFAULT;
+		goto done;
+	}
+
+	local_buf = kmalloc(ioc.len+1, GFP_ATOMIC);
+	if (local_buf == NULL) {
+		bphy_err(drvr, "kmalloc failure for %d bytes for %s\n", ioc.len, brcmf_ifname(ifp));
+		ret = -ENOMEM;
+		goto done;
+	}
+	*(char *)(local_buf + ioc.len) = '\0';
+
+	if (copy_from_user(local_buf, ioc.buf, ioc.len)) {
+		bphy_err(drvr, "Failed to copy ioc buffer from user space\n");
+		ret = -EFAULT;
+		goto done;
+	}
+
+	/* First NULL terminated string in the ioc.buf is the requested data */
+	if (strncmp (local_buf, "bs_data", strlen("bs_data")) == 0) {
+		/* retrieve the table from firmware */
+		ret = brcmf_fil_iovar_data_get(ifp, "bs_data", local_buf, ioc.len);
+		request="bs_data";
+	}
+	else if (strncmp (local_buf, "pktq_stats", strlen("pktq_stats")) == 0) {
+                /* retrieve the table from firmware */
+                ret = brcmf_fil_iovar_data_get(ifp, "pktq_stats", local_buf, ioc.len);
+		request="pktq_stats";
+        }
+	else if (strncmp (local_buf, "chanim_stats", strlen("chanim_stats")) == 0) {
+                /* retrieve the table from firmware */
+                ret = brcmf_fil_iovar_data_get(ifp, "chanim_stats", local_buf, ioc.len);
+		request="chanim_stats";
+        }
+	else if (strncmp (local_buf, "csa", strlen("csa")) == 0) {
+		u32 target_channel;
+                /* Send the channel switch request */
+		memcpy(&target_channel, local_buf + strlen("csa")+1, sizeof(u32));
+		ret = brcmf_fil_cmd_int_set(ifp, BRCMF_C_SET_CHANNEL, target_channel);
+		request="csa";
+        }
+	else {
+		bphy_err(drvr, "Unsupported request in ioctl buf\n");
+		ret = -ENOTSUPP;
+		goto done;
+	}
+
+	if (ioc.cmd == WLC_GET_VAR) {
+		if (ret) {
+			// bphy_err(drvr, "Failed to retrieve iovar_data for request %s on %s, err:%d\n", request, brcmf_ifname(ifp), ret);
+			goto done;
+		}
+
+		if (copy_to_user(ioc.buf, local_buf, ioc.len)) {
+			bphy_err(drvr, "Failed to copy ioctl results to user space\n");
+			ret = -EFAULT;
+			goto done;
+		}
+		else {
+#if 0
+			char *lb=(char *) local_buf;
+			bphy_err(drvr, "Successful iovar data retrieval for %s on %s\n", request,  brcmf_ifname(ifp));
+			printk ("%02x %02x %02x %02x %02x %02x %02x %02x %02x %02x\n", 
+				  *(lb), *(lb+1), *(lb+2), *(lb+3), *(lb+4),
+				*(lb+5), *(lb+6), *(lb+7), *(lb+8), *(lb+9));
+#endif
+		}
+	}
+	else {
+		if (ret) {
+			bphy_err(drvr, "Failed to perform set request %s on %s, err:%d\n", request, brcmf_ifname(ifp), ret);
+			goto done;
+		}
+		else {
+			bphy_err(drvr, "Successful set for %s on %s\n", request,  brcmf_ifname(ifp));
+		}
+	}
+
+done: 
+	if (local_buf) {
+		kfree(local_buf);
+	}
+	return ret;
+}
+
 /**
  * brcmf_skb_is_iapp - checks if skb is an IAPP packet
  *
@@ -625,7 +769,8 @@ static const struct net_device_ops brcmf
 	.ndo_stop = brcmf_netdev_stop,
 	.ndo_start_xmit = brcmf_netdev_start_xmit,
 	.ndo_set_mac_address = brcmf_netdev_set_mac_address,
-	.ndo_set_rx_mode = brcmf_netdev_set_multicast_list
+	.ndo_set_rx_mode = brcmf_netdev_set_multicast_list,
+	.ndo_do_ioctl = brcmf_netdev_ioctl
 };
 
 int brcmf_net_attach(struct brcmf_if *ifp, bool locked)
--- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/core.h
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/core.h
@@ -23,7 +23,8 @@
  */
 #define BRCMF_DCMD_SMLEN	256
 #define BRCMF_DCMD_MEDLEN	1536
-#define BRCMF_DCMD_MAXLEN	8192
+/* Needs to be slightly bigger than the ioc buf from user space for ioctl's */
+#define BRCMF_DCMD_MAXLEN	(8192+16)
 
 /* IOCTL from host to device are limited in length. A device can only handle
  * ethernet frame size. This limitation is to be applied by protocol layer.
--- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/fwil.c
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/fwil.c
@@ -118,6 +118,10 @@ brcmf_fil_cmd_data(struct brcmf_if *ifp,
 	} else if (fwerr < 0) {
 		brcmf_dbg(FIL, "Firmware error: %s (%d)\n",
 			  brcmf_fil_get_errstr((u32)(-fwerr)), fwerr);
+#if 0
+		brcmf_err("Firmware error for cmd %s: %s (%d)\n", (char *) data,
+			  brcmf_fil_get_errstr((u32)(-fwerr)), fwerr);
+#endif
 		err = -EBADE;
 	}
 	if (ifp->fwil_fwerr)
